{"version":3,"sources":["components/Header.jsx","components/Game.jsx","App.js","index.js"],"names":["Header","className","React","Component","Game","props","resetForm","setState","state","randomNumber","Math","floor","random","guesses","lastResult","lowOrHi","guessCount","classLastResult","classButtonNewGame","checkGuess","bind","this","guessNumber","focus","startNewGame","event","preventDefault","guessValue","target","value","randomValue","prevState","submitGuess","setAttribute","onSubmit","name","type","min","max","placeholder","ref","input","button","onClick","newGame","App","gameKey","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.590261ad.chunk.js","sourcesContent":["import React from 'react';\r\n// eslint-disable-next-line\r\nimport index from '../index.css'\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"Header\">\r\n                <h1 className=\"text-center pb-1 fw-bold\"> welcome </h1>\r\n                <p className=\"text-justify\"> A random number between 1-100 was generated by computer, try and see if\r\n                    you can guess it. But remember, you only have 10 chances.</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n// eslint-disable-next-line\r\nimport index from '../index.css'\r\n\r\nclass Game extends React.Component {\r\n\r\n\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            randomNumber: Math.floor(Math.random() * 100) + 1 + \"\",\r\n            guesses: \"\",\r\n            lastResult: \"\",\r\n            lowOrHi: \"\",\r\n            guessCount: 10,\r\n            classLastResult: \"\",\r\n            classButtonNewGame: 'd-none'\r\n\r\n        };\r\n\r\n        this.checkGuess = this.checkGuess.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        this.guessNumber.focus();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.classButtonNewGame === \"btn btn-primary m-2\") {\r\n            this.startNewGame.focus();\r\n        }\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState({\r\n\r\n            ...this.state,\r\n            randomNumber: Math.floor(Math.random() * 100) + 1 + \"\",\r\n            guesses: \"\",\r\n            lastResult: \"\",\r\n            lowOrHi: \"\",\r\n            guessCount: 10,\r\n            classLastResult: \"\",\r\n            classButtonNewGame: 'd-none',\r\n\r\n        })\r\n        this.checkGuess = this.checkGuess.bind(this);\r\n\r\n    }\r\n\r\n\r\n\r\n    checkGuess(event) {\r\n        event.preventDefault();\r\n        let guessValue = event.target.guessNumber.value;\r\n        let randomValue = this.state.randomNumber;\r\n        event.target.guessNumber.value = \"\";\r\n\r\n        if (guessValue !== \"\") {\r\n            this.setState((prevState) => ({\r\n                guesses: prevState.guesses === \"\" ? `Previous guesses: ${guessValue}` : `${prevState.guesses}, ${guessValue}`,\r\n                guessCount: prevState.guessCount - 1\r\n            }));\r\n            if (guessValue === randomValue) {\r\n                this.setState({\r\n                    lastResult: \"Congratulations! You got it right!\",\r\n                    lowOrHi: \"\",\r\n                    classLastResult: \"m-2 p-1 bg-success\",\r\n                    classButtonNewGame: \"btn btn-success m-2\"\r\n                });\r\n\r\n                this.submitGuess.setAttribute(\"disabled\", \"disabled\");\r\n                this.guessNumber.setAttribute(\"disabled\", \"disabled\");\r\n\r\n\r\n\r\n\r\n\r\n\r\n            } else if (this.state.guessCount === 1) {\r\n                this.setState({\r\n                    lastResult: \"GAME OVER!\",\r\n                    lowOrHi: \"\",\r\n                    classLastResult: \"m-2 p-1 bg-warning\",\r\n                    classButtonNewGame: \"btn btn-primary m-2\",\r\n                });\r\n\r\n                this.submitGuess.setAttribute(\"disabled\", \"disabled\");\r\n                this.guessNumber.setAttribute(\"disabled\", \"disabled\");\r\n\r\n\r\n            } else if (guessValue > randomValue) {\r\n                this.setState({\r\n                    lastResult: \"Wrong!\",\r\n                    lowOrHi: \"Last guess was too high!\",\r\n                    classLastResult: \"m-2 p-1 bg-danger\",\r\n\r\n                });\r\n            } else if (guessValue < randomValue) {\r\n                this.setState({\r\n                    lastResult: \"Wrong!\",\r\n                    lowOrHi: \"Last guess was too low!\",\r\n                    classLastResult: \"m-2 p-1 bg-info\"\r\n                })\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\"form-inline formDesign\" onSubmit={this.checkGuess}>\r\n                    <label className=\"m-3 reminder\"> Reminder: you have {this.state.guessCount} chances left!</label>\r\n                    <br />\r\n                    <label className=\"m-2\"> Enter a Guess: </label>\r\n                    <input name=\"guessNumber\" type=\"number\" min=\"1\" max=\"100\"\r\n                        className=\"form-control m-2\" placeholder=\"Enter your guess\" ref={(input) => { this.guessNumber = input; }} />\r\n                    <button type=\"submit\" className=\"btn m-2\" ref={(button) => { this.submitGuess = button; }}>Submit guess</button>\r\n                    <button className=\"btn m-2\" type=\"reset\" >Clear</button>\r\n                    <button className=\"btn m-2 reset\" onClick={this.resetForm}>Reset</button>\r\n\r\n                </form>\r\n                <div className=\"formDesign\">\r\n                    <p className=\"m-2\">{this.state.guesses}</p>\r\n                    <p className={this.state.classLastResult}>{this.state.lastResult}</p>\r\n                    <p className=\"m-2\">{this.state.lowOrHi}</p>\r\n\r\n                    <button ref={(button) => { this.startNewGame = button; }} className={this.state.classButtonNewGame} onClick={this.props.newGame}\r\n                    >Start new game</button>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport Header from './components/Header';\nimport Game from \"./components/Game\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      gameKey: true\n    };\n\n    this.newGame = this.newGame.bind(this);\n  }\n\n  newGame() {\n    this.setState((prevState) => ({\n      gameKey: !prevState.gameKey\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header />\n        <Game key={this.state.gameKey} newGame={this.newGame} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}